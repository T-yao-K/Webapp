{"ast":null,"code":"var _jsxFileName = \"/app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Alert } from '@mui/material';\nimport useFetchGenres from './hooks/useFetchGenres';\nimport SearchForm from './components/SearchForm';\nimport SearchResults from './components/SearchResults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NovelSearch = () => {\n  _s();\n  const [novels, setNovels] = useState([]);\n  const [error, setError] = useState(null);\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const [order, setOrder] = useState('new');\n  const {\n    genres,\n    error: genresError\n  } = useFetchGenres();\n  const handleSearch = async keyword => {\n    setError(null);\n    try {\n      const backendUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n      const genreParam = selectedGenres.join('-');\n      const response = await fetch(`${backendUrl}/search?keyword=${encodeURIComponent(keyword)}&genre=${genreParam}&order=${order}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      if (data.error) {\n        throw new Error(data.error);\n      }\n      setNovels(data);\n    } catch (error) {\n      console.error('Error fetching novels:', error);\n      setError('小説の検索に失敗しました');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [genresError && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      style: {\n        marginBottom: '20px'\n      },\n      children: genresError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 23\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      style: {\n        marginBottom: '20px'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n      onSearch: handleSearch,\n      genres: genres,\n      selectedGenres: selectedGenres,\n      setSelectedGenres: setSelectedGenres,\n      order: order,\n      setOrder: setOrder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n      novels: novels,\n      genres: genres\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(NovelSearch, \"vqP9sb19Ckc7MDteK6dCHNjyp/E=\", false, function () {\n  return [useFetchGenres];\n});\n_c = NovelSearch;\nexport default NovelSearch;\nvar _c;\n$RefreshReg$(_c, \"NovelSearch\");","map":{"version":3,"names":["React","useState","Alert","useFetchGenres","SearchForm","SearchResults","jsxDEV","_jsxDEV","NovelSearch","_s","novels","setNovels","error","setError","selectedGenres","setSelectedGenres","order","setOrder","genres","genresError","handleSearch","keyword","backendUrl","process","env","REACT_APP_API_URL","genreParam","join","response","fetch","encodeURIComponent","ok","Error","data","json","console","children","severity","style","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","_c","$RefreshReg$"],"sources":["/app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Alert } from '@mui/material';\nimport useFetchGenres from './hooks/useFetchGenres';\nimport SearchForm from './components/SearchForm';\nimport SearchResults from './components/SearchResults';\n\nconst NovelSearch = () => {\n  const [novels, setNovels] = useState([]);\n  const [error, setError] = useState(null);\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const [order, setOrder] = useState('new');\n  const { genres, error: genresError } = useFetchGenres();\n\n  const handleSearch = async (keyword) => {\n    setError(null);\n    try {\n      const backendUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n      const genreParam = selectedGenres.join('-');\n      const response = await fetch(`${backendUrl}/search?keyword=${encodeURIComponent(keyword)}&genre=${genreParam}&order=${order}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      if (data.error) {\n        throw new Error(data.error);\n      }\n      setNovels(data);\n    } catch (error) {\n      console.error('Error fetching novels:', error);\n      setError('小説の検索に失敗しました');\n    }\n  };\n\n  return (\n    <div>\n      {genresError && <Alert severity=\"error\" style={{ marginBottom: '20px' }}>{genresError}</Alert>}\n      {error && <Alert severity=\"error\" style={{ marginBottom: '20px' }}>{error}</Alert>}\n      <SearchForm\n        onSearch={handleSearch}\n        genres={genres}\n        selectedGenres={selectedGenres}\n        setSelectedGenres={setSelectedGenres}\n        order={order}\n        setOrder={setOrder}\n      />\n      <SearchResults novels={novels} genres={genres} />\n    </div>\n  );\n};\n\nexport default NovelSearch;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}